// Define an interface for the return type
export interface GridTemplateSelection {
  gridString: string;
  key: string; // e.g., "Mini1", "Mini2", etc.
  filePath?: string; // where to find the grid template file needed by ingrid_core
}

// N.B. this enum needs to be kept up to date with the text files in game-generation, 
// e.g. crossword-grids/mini-3.grid.txt, because ingrid_core operates on filenames 
// passed as arguments.
// TODO: rename all grid template files to match their keys in GridTemplates
// e.g., "mini-1.grid.txt" should be "Mini1.grid.txt" to match the enum keys
enum GridTemplates {
  Parity1 = `
....#.....#....
....#.....#....
...............
......##.......
###.....#......
............###
.....#.....#...
....#.....#....
...#.....#.....
###cremebrulees
......#.....###
.......##......
...............
....#.....#....
....#.....#....`,

  Mini1 = `
.....
.....
.....
.....
.....`,

  Mini2 = `
#...#
....#
.....
.....
.....`,

  Mini3 = `
.....
.....
.....
.....
....#`,

  Mini4 = `
##...
.....
.....
.....
...##`,

  Mini5 = `
#....
.....
.....
.....
.....`,

  Mini6 = `
....#
.....
.....
.....
#....`,

  Mini7 = `
#....
.....
.....
.....
#...#`,

  Mini8 = `
....#
....#
.....
#....
#....`,

  Mini9 = `
.....
.....
.....
....#
...##`,

  Mini10 = `
...##
....#
.....
.....
##...`,

  Mini11 = `
....#
.....
.....
.....
.....`,

  Mini12 = `
.....
.....
.....
.....
#....`,

  Mini13 = `
##...
#....
.....
....#
...##`,

  Mini14 = `
....#
.....
.....
.....
....#`,

  Mini15 = `
...##
....#
.....
#....
##...`,

  Mini16 = `
##...
.....
.....
.....
...##`,

  Mini17 = `
...##
.....
.....
.....
##...`,

  Mini18 = `
.....
.....
.....
#...#
#...#`,

  Mini19 = `
#...#
#...#
.....
.....
.....`,

  Mini20 = `
#...#
.....
.....
.....
#...#`,

  Mini21 = `
#....
.....
.....
.....
....#`,

  Mini22 = `
.....
.....
.....
#....
#....`,

  Mini23 = `
#....
.....
.....
....#
...##`,

  Mini24 = `
....#
.....
.....
#....
##...`,

  Mini25 = `
.....
.....
.....
.....
#...#`,

  Mini26 = `
#...#
.....
.....
.....
.....`,

  Mini27 = `
##...
.....
.....
.....
....#`,

  Mini28 = `
...##
.....
.....
.....
#....`,

  Mini29 = `
....#
....#
.....
#....
#....`,

  Mini30 = `
....#
....#
.....
.....
##...`,

  Mini31 = `
...##
.....
.....
#....
#....`,

  Mini32 = `
##...
.....
.....
....#
....#`,

  Mini33 = `
#....
#....
.....
.....
...##`,

  Mini34 = `
#....
.....
.....
.....
#....`,

  Mini35 = `
#....
#....
.....
....#
....#`,

  Mini36 = `
.....
.....
.....
....#
#...#`,

  Mini37 = `
.....
.....
.....
#....
#...#`,

  Mini38 = `
#...#
#....
.....
.....
.....`,

  Mini39 = `
#...#
....#
.....
.....
.....`,

  Mini40 = `
....#
.....
.....
.....
....#`,

// TODO: determine why these break the iOS app and restore them
//   Mini41 = `
// .....
// ##...
// .....
// ...##
// .....`,

//   Mini42 = `
// .....
// ...##
// .....
// ##...
// .....`,

  Mini43 = `
#....
#....
.....
.....
....#`,

  Mini44 = `
....#
....#
.....
.....
#....`,

  Mini45 = `
....#
.....
.....
#....
#....`,

  Mini46 = `
#....
.....
.....
....#
....#`,

  Mini47 = `
##...
.....
.....
.....
##...`,

  Mini48 = `
...##
.....
.....
.....
...##`,

  Mini49 = `
#...#
....#
.....
.....
##...`,

  Mini50 = `
#...#
#....
.....
.....
...##`,

  Mini51 = `
#...#
.....
.....
.....
#....`,

  Mini52 = `
#...#
.....
.....
.....
....#`,

  Mini53 = `
....#
.....
.....
.....
#...#`,

  Mini54 = `
.....
.....
.....
....#
....#`,

  Mini55 = `
#....
#....
.....
.....
.....`,

  Mini56 = `
....#
....#
.....
.....
.....`,

  Mini57 = `
.....
.....
.....
.....
...##`,

  Mini58 = `
.....
.....
.....
.....
##...`,

  Mini59 = `
##...
.....
.....
.....
.....`,

  Mini60 = `
...##
.....
.....
.....
.....`,

}

const gridTemplateKeys = Object.keys(GridTemplates).filter(k => typeof GridTemplates[k as keyof typeof GridTemplates] === 'string'); // Filter out reverse numeric keys if any
const gridTemplateCount = gridTemplateKeys.length;
export const allGridTemplates = gridTemplateKeys.map(key => getGridTemplate(key)); // Ensure we only get string values

// Get a gridTemplate by name e.g. 'mini-7', or pass 'random'
export function getGridTemplate(gridName = 'random') : GridTemplateSelection {
  let templateKey: string;
  if (gridName === 'random') {
    templateKey = getRandomGridTemplateKey();
  } else {
    // Convert "mini-1" (current filename style in game-gen) to enum style "Mini1", etc.
    templateKey = gridName.replace('mini-', 'Mini'); 
  }

  if (GridTemplates[templateKey as keyof typeof GridTemplates] === undefined) {
    throw new Error(`Invalid grid template index ${templateKey}. That grid template does not exist.`);
  } else {
    return {
      gridString: GridTemplates[templateKey as keyof typeof GridTemplates],
      key: templateKey,
      filePath: `./crossword-grids/${templateKey.replace('Mini', 'mini-')}.grid.txt`
    } as GridTemplateSelection;
  } 
}

const getRandomGridTemplateKey = (): string => {
  const randomIndex = Math.floor(Math.random() * gridTemplateCount);
  const randomKey = gridTemplateKeys[randomIndex] as keyof typeof GridTemplates;
  return randomKey;
};
 